#!/usr/bin/env python
"""
grapher.py - draw curve of data in the following format:

HS<heap_size>
#<counter> MD<memory_delta> FB<free_bytes> LAB<largest_allocatable_block> FP<fragmentation_percent> T<time_in_usec> OOM<caused_oom>
...
#<counter> MD<memory_delta> FB<free_bytes> LAB<largest_allocatable_block> FP<fragmentation_percent> T<time_in_usec> OOM<caused_oom>

e.g.

HS2147483648
#796128 MD-36 FB2146626120 LAB2146626120 FP0 T1 OOM4
"""

import sys
import random
import numpy as np
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt

# reference value color first
COLORS = ["b-", "r-", "g-", "b-", "y-", "m-", "c-"]
g_figure = plt.figure()
g_row = 1

def subplot(xl, yl, t):
    global g_row

    ax = g_figure.add_subplot(3, 1, g_row, xlabel=xl, ylabel=yl, title=t)
    g_row += 1

    return ax

# allocsys is a list of (allocator_name, ys)
# first is the ref alloc.
def plot_memory(allocsys, hs):
    ax = subplot("Time", "Memory usage (kb)", "Heap usage")

    for i in range(len(allocsys)):
        name, ys = allocsys[i]
        ax.plot(ys, COLORS[i])

    #plt.axis([100, 0, 0, len(bins)*0.75])
    #plt.axis([0, len(ys), 0, hs/1024.0])
    #plt.axis('tight')
    #plt.grid(True)
    #plt.show()

def plot_speed(allocsys, hs):
    ax = subplot("Time", "Time (usec)", "Speed");

    for i in range(len(allocsys)):
        name, ys = allocsys[i]
        rs = []
        v = 15
        for j in range(len(ys)):
            rs.append(v)
            v += random.randint(-1, 1)
            if v > 100:
                v = 100
            elif v < 0:
                v = 0
        ax.plot(rs, COLORS[i])

#
# App
#
def main():
    if len(sys.argv) < 3:
        print "usage: %s: lifetime refplot plot1 [...]" % sys.argv[0]
        print "all arguments are files."
        print "lifetime is calculated lifetime values for current alloc data."
        print "plot1 [...plotN] are data files generated by different allocators, for current alloc data."
        sys.exit(1)

    allocs = []

    lifetime = []
    lifetime_file = open(sys.argv[1])
    if lifetime_file:
        found = False
        for line in lifetime_file.xreadlines():
            if not found and line.find("macro") > 0:
                found = True
            if found:
                # """# 230090: 78% (own = 13, other = 164322011)"""
                data = line.split()
                if data[0] != '#':
                    break

                try:
                    handle = int(data[1][:-1])
                    percent = int(data[2][:-1])
                except:
                    continue

                if percent >= 90:
                    lifetime[handle] = percent

    # extract all data
    for fname in sys.argv[2:]:
        f = open(fname, "r")
        if not f:
            sys.exit(1)

        line = f.readline()
        heap_size = int(line[2:])
        data = []
        for line in f.xreadlines():
            #796128 MD-36 FB2146626120 LAB2146626120 FP0 T1 OOM4
            count, delta, free_bytes, lab, fragmentation, optime, caused_oom = line.split()

            count = int(count[1:])
            delta = int(delta[2:])
            free_bytes = int(free_bytes[2:])
            lab = int(lab[3:])
            fragmentation = int(fragmentation[2:])
            optime = int(optime[1:])
            caused_oom = int(caused_oom[3:])

            data.append((count, delta, free_bytes, lab, fragmentation, optime, caused_oom))

        f.close()

        allocs.append((fname, data))

    plot_init()

    # plot memory usage
    allocsys = []
    for fname, data in allocs:
        ys = []
        for count, delta, free_bytes, lab, fragmentation, optime, caused_oom in data:
            # do awesome calculations
            ys.append((heap_size - free_bytes)/1024.0)
            #ys.append(free_bytes)
        allocsys.append((fname, ys))

    plot_memory(allocsys, heap_size)

    # plot speed
    allocsys = []
    for fname, data in allocs:
        ys = []
        for count, delta, free_bytes, lab, fragmentation, optime, caused_oom in data:
            # do awesome calculations
            ys.append(optime)
            #ys.append(free_bytes)
        allocsys.append((fname, ys))

    plot_speed(allocsys, heap_size)

    plot_save()

def plot_init():
    plt.axis('tight')
    plt.grid(True)

def plot_save():
    plt.savefig("plot-memory-usage.pdf")

if __name__ == '__main__':
    main()


